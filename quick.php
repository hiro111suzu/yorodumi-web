<?php 
//. init
ini_set( 'memory_limit', '2048M' );
define( 'COLOR_MODE', 'ym' );
require( __DIR__. '/common-web.php' );
require( __DIR__. '/cls_omoid.php' );

$wikipe_tags = [];
//.. エントリID解決
$main_id = new cls_entid( 'get_kw' );

//- sas-model => sas entry
if ( $main_id->db == 'sasbdb-model' )
	$main_id->set_sas( _sas_info( 'mid2id', $main_id->id ) );

extract( $main_id->get() ); //- $db, $DB, $id, $did

define( 'ID'	, $id );
define( 'DB'	, $db );
define( 'DID'	, $did );

define( 'EPDB', DB == 'pdb' && $main_id->is_em() );
define( 'IMG_MODE', DB == 'emdb' || EPDB ? 'em' : 'y' );

//- EMDBか、fitted EMDBのあるPDB
if ( DB == 'emdb' ) {
	function _emstyle( $s ) { return $s; }
} else {
	function _emstyle( $s ) {}
}

//.. ajax raply: chemcompのPDBのページ変更
if ( _getpost( 'ajax' ) == 'chem2pdbs' ) {
	die( _chem2pdbs() );
}

//.. データがない場合の対処

//- インクルードするファイル
$fn_include = realpath( DB == 'bird' ? 'quick-chem.php' : "quick-$db.php" );

$json = $main_id->mainjson();

$flg_id_hit = false;
$flg_add_hist = false;
if ( $json ) {
	$flg_id_hit = true;
	$flg_add_hist = true;
}

$unrel_type = '';
if ( $json == [] && ID != '' ) {
	if ( $main_id->replaced() ) {
		//- 変更データ
		$unrel_type = 'pdb_rep';
		$flg_id_hit = true;
	} else if ( $main_id->is_prerel() ) {
		//- 未公開PDBデータ
		$unrel_type = 'prerel';
		$flg_id_hit = true;
		$flg_add_hist = true;
	} else if ( $db == 'emdb' && _json_cache( DN_DATA. '/emdb/emdb-obs.json.gz' )->$id != '' ) {
		$unrel_type = 'emdb_obs';
		$flg_id_hit = true;
	}
	if ( $unrel_type )
		$fn_include = realpath( 'quick-nohit.php' );
}

define( 'ID_HIT', $flg_id_hit );

//- ヒット無し
if ( ! ID_HIT && ID != '' ) {
	//- IDヒットなし、キーワード検索へリダイレクト
	_redirect(
		( _getpost( 'img_mode' ) == 'em' ? 'esearch' : 'ysearch' )
		. ".php?kw=" . _getpost( 'id' ) 
	);
}

//. misc init
//.. term
_define_term( <<<EOD
TERM_SHOW_IN_VIEWER
	Show in viewer
	ビューアーで表示
TERM_SEARCH_OMOKAGE
	Search similar-shape structures by Omokage search
	Omokage検索で類似形状データを探す
TERM_SIMILAR_SHAPE_DATA
	Similar-shape strucutres
	類似形状データ
TERM_SIM_SHAPE
	Similar-shape
	類似形状
TERM_SEARCH_OMOKAGE_ASB
	Search similar-shape structures of this assembly by Omokage search
	Omokage検索でこの集合体の類似形状データを探す
TERM_ABOUT_VALREP
	About validation report
	検証レポートについて
TERM_REL_FIT_E
	atomic model generated by this map
	このマップから作成された原子モデル
TERM_REL_FIT_P
	map data used to model this data
	このデータのモデリングに利用したマップデータ
TERM_REL_CITE
	citing same article
	同じ文献を引用
TERM_REL_START
	Starting model for refinement
	精密化の開始モデル
TERM_OPEN_VIEWER
	Open structure viewer
	構造ビューアを開く
TERM_REL_MOM
	Related items in <i>Molecule of the Month</i>
	「今月の分子」の関連する項目
EOD
);

//.. unit
$_xmlunit = [];

//.. eq img
$_eqimg_data = [
	'arctica' => [
		'name' => 'Talos Arctica' ,
		'by' => 'FEI Company'
	] ,
	'f20' => [
		'name' => 'Tecnai F20' ,
		'by' => 'FEI Company'
	] ,
	'f200c' => [
		'name' => 'Talos  F200C' ,
		'by' => 'FEI Company'
	] ,
	'f30' => [
		'name' => 'Tecnai F30' ,
		'by' => 'FEI Company'
	] ,
	'halo' => [
		'name' => 'Titan Halo' ,
		'by' => 'FEI Company'
	] ,
	'krios' => [
		'name' => 'Titan Krios' ,
		'by' => 'FEI Company'
	] ,
	'l120c' => [
		'name' => 'Talos L120C' ,
		'by' => 'FEI Company'
	] ,
	'polara' => [
		'name' => 'Tecnai Polara' ,
		'by' => 'FEI Company'
	] ,
	'spirit' => [
		'name' => 'Tecnai Spirit' ,
		'by' => 'FEI Company'
	] ,
];


//.. trep / lang
$_trep = [];
_add_trep( 'quick' );
_add_lang( 'quick' );

//.. page conf
_simple()->page_conf([
	'title' 	=> _l( 'Yorodumi' ) ,
	'icon'		=> 'miru' ,
	'sub'		=> _ej(
		'PDB/EMDB/SASBDB browser' ,
		'PDB/EMDB/SASBDB ブラウザ' 
	) ,
	'openabout' => true ,
	'js'		=> 'quick' ,
	'docid'		=> 'about_ym' ,
	'newstag'	=> 'ym' ,
])

//.. css
->css( <<<EOD
.img { height: 100px;}
.imnmbox { display: inline-block; text-align: center; }
.mainimg { float:left; padding-right: 0.5em; }
.asymbar, .chainicon {
	border: 1px solid gray;
	box-shadow: 0 0 0.4em 0.2em rgba(0,0,0,0.2) inset;
	vertical-align: middle;
}
.asymbar {
//	display: inline-block; margin: 1px 0 1px 1px; padding: 0;
	display: inline-block; margin: 0px 0 0px 0px; padding: 0;
	height: 1.1em; 
}
.asymbar_tx { display: none; font-size: smaller; margin: 0.5em; }
.asymbar_box { display: inline-block; border: 1px solid gray;
	line-height: 0;
	background: white;
	margin: 0; padding: 1px;
	//padding: 0px 1px 0px 0; 
//	width: 100%;
}

.chainicon {
	padding: 0 0.3em; margin: 1px;
}

.icon_ss {
	display: inline-block; 
	width:1.5em; height:1.5em;
	border: 1px solid gray;
	vertical-align: middle;
	margin: 0 1px;
	padding: 0;
}

//.chemimg_s { display: inline-block;
//	width: 60px; height; 60px; vertical-align: middle; padding: 0;  margin: -3px; }

.chemimg_s {
	width: 60px; height; 60px; vertical-align: middle; padding: 0;  margin: 0;
	position: relative; z-index: 0; display: inline-block; overflow: hidden;
	border: 1px solid #ddd;
}
.chemimg_s img { width: 100%; height: 100% }
.chemimg_s p {
	font-weight: bold;
	color: green;
	position: absolute; z-index: 2;  top: -0.4em; left: 0.2em;
	text-shadow: 1px 1px 2px white, 1px -1px 2px white, -1px -1px 2px white, -1px -1px 2px white;
}

.taxom{ height: 50px;}

//- icap キャプション付き画像
.icap { display: inline-block; text-align: center;  }
.icapi { height: 100px; }

//- relation
.r_cite, .r_fit, .r_annot {
	font-weight: bold; color: white; padding: 0 4px; background: #a00; text-shadow: none;
	box-shadow: 0 0 2px 2px #fff;
	display: inline-block;
}
.r_cite { background: #088; }
.r_fit  { background: #a00; }
.r_annot { background: #333; } 

//- 動画選択ボタン
.movselbtn { padding: 0; margin-right: 1em }

//- 選択ボタンなどで、選択なし
.failed { background: gray; box-shadow: none; }

//- スライダー
.ui-slider {
	position: relative;
	text-align: left;
	border: 2px solid $col_medium;
	border-radius: 3px;
}

.ui-slider .ui-slider-handle {
	position: absolute;
	z-index: 2;
	width: 1.3em;
	height: 1.3em;
	cursor: default;
	-ms-touch-action: none;
	touch-action: none;

	$bg_blight;
	border: 2px solid $col_medium;
	border-radius: 3px;
	box-shadow: 0 0 5px rgba(0,0,0,0.3);
}
.ui-slider .ui-slider-handle:hover {
	box-shadow: 0 0 10px #ff0;
}

.ui-slider .ui-slider-range {
	position: absolute;
	z-index: 1;
	font-size: .7em;
	display: block;
	border: 0;

	text-align: center;
	vertical-align: middle;
	color: red;
	$bg_blight;
}
.ui-slider-horizontal {
	height: .6em;
}
.ui-slider-horizontal .ui-slider-handle {
	top: -.5em;
	margin-left: -.6em;
}
.ui-slider-horizontal .ui-slider-range {
	top: 0;
	height: 100%;
}
.ui-slider-horizontal .ui-slider-range-min {
	left: 0;
}
.ui-slider-horizontal .ui-slider-range-max {
	right: 0;
}
.slider_frame { padding: 5px 10px !important; 
	display: inline-block; min-width: 300px; vertical-align: middle;
}

//.inlineb { display: inline-block; border: 1px solid red; }

//- 化合物画像
.chemsvg { float:left; width:100px; height:100px; }
.inlineblk{ display:inline-block; vertical-align: top; }

//- validation report
#valrep_img { width: 300px; }

//- 配列ボックス
.seq { font-family: monospace;
	font-weight: normal;
	background: white; border: 1px solid #aaa; padding: 1px 3px; margin: 0.5em 0;
	max-height: 300px;  overflow-y: auto;
}
.seq_sample {
	font-size: small;
	float: left;
	margin: 0.5em 1em 0 0;
}
.sbar {
	border: 1px solid #aaa; padding: 0px; margin: 0; display: inline-block;
	height: 0.7em; width: 10em;
}
.sbari { height: 100%; background: #777; }


.helix { background: #eae; } 
.beta { background: #dd7; } 
.turn { background: #9f9; } 
.bp { background: #aee;  } 
.mism { background: #99d; }
.drna{ background: #d99 }
.unob { color: #800; text-decoration: line-through; }
.modres { color: green; text-decoration: underline; }
.seqsel{ background: #ffffb0; }
.seqselx { background: #ccc; }

//- 3d ユニットセル
#uc_outer, #uc_outer div{transition:1s;}
#uc_outer { height:200px;width:200px;position:relative;margin:1em auto;
//	border: 1px solid red;
}
#uc_inner { 
	height:200px;width:200px;
	position:absolute; top: -60px; left: -60px;
	transform-style:preserve-3d;
	transform:  rotateZ(180deg) rotateX(20deg) rotateY(-45deg);
//	border: 1px solid blue;
}

#uc_outer:hover #uc_inner {transform: rotateZ(180deg) rotateX(20deg) rotateY(45deg);}

.uc_pl, .uc_frame { border: 2px solid gray; box-sizing:border-box;
	position: absolute;
//	left: 100px; top: 100px;
	transform-origin: 0 0 0;
}
.uc_pl {box-shadow: 5px 5px 3px 3px rgba(0,0,0,0.1) inset; font-weight: bold; font-size: larger;}
.uc_frame { background: transparent }
.pl_alpha { background: #dee }
.pl_beta { background: #ede }
.pl_gamma { background: #eed }

//- 装置画像
.eqimg {max-height: 150px}
.eqimgl {max-height: none }

//- detail tab
.tabdiv ul { margin-bottom: 1em }
.dettab_ref { float: right; font-weight: normal; }

//- svgimg
.svgimg { height: 100px; display: inline-block }

//- seq_block
.seq_block_outer {
	display: inline-block;
	position: relative;
//	overflow: hidden;
	margin: 0 0.3em;
	background: $col_bright;
	border: 2px solid $col_medium; border-width: 0 2px 0 2px;
	width: 200px; height: 1em;
	resize: both;
} 
.seq_block_line {
	display: inline-block;
	width: 100%;
	top: 50%;
	transform: translateY(-50%);
	border: none;
	background: $col_medium;
	height: 10%;
	position: absolute;
}
.seq_block {
	display: inline-block;
	position: absolute;
	height: 100%;

	background: $col_dark;
	box-shadow: 1px 1px 4px #777;
	border-radius: 4px
}
.seq_block:hover {
	box-shadow: 0 0 10px rgba(255,255,0,0.5);
}
.seq_block:active {
	box-shadow: 0 0 2px rgba(0,0,0,0.7);
}
.seq_unobs {
	display: inline-block;
	top: 50%;
	transform: translateY(-50%);
	height: 60%;
	background: rgba(255,0,0,0.4);
	position: absolute;
	box-shadow: 1px 1px 4px #777;
}

EOD
);

//. 「開く」エリア
//.. ランダム画像
$tab_rand = [
	'tab' => [ 'random', 'Random choices' ] ,
	'div' => ''
		. _btn( ".randimgbtn| !_randimg.rep('a',this)"	, _l( 'All data'			 ) )
		. _btn( ".randimgbtn| !_randimg.rep('l',this)"	, _l( 'Latest PDB'			 ) )
		. _btn( ".randimgbtn| !_randimg.rep('p',this)"	, _l( 'All PDB'				 ) )
		. _btn( ".randimgbtn| !_randimg.rep('e',this)"	, 'EMDB' )
		. _btn( ".randimgbtn| !_randimg.rep('s',this)"	, 'SASBDB' )
		. _btn( ".randimgbtn| !_randimg.rep('c',this)"	, _l( 'Chemical componets'	 ) )
		. ' '
		. _more( ''
//		. _btn( ".randimgbtn| !_randimg.rep('h',this)"	, _l( 'PDB-EMDB hybrid'		 ) )
		. _btn( ".randimgbtn| !_randimg.rep('n',this)"	, _l( 'NMR'					 ) )
		. _btn( ".randimgbtn| !_randimg.rep('hlx',this)"	, _l( 'Helical symmetry'	 ) )
		. _btn( ".randimgbtn| !_randimg.rep('icos',this)"	, _l( 'Icosahedral symmetry' ) )
		,
		[ 'btn' => '>>', 'btn2' => '<<' ]
		)
		. _p( '#randimg_loading | .hide', LOADING . _l( 'Loading...' ) )
		. _div( '#randimg', '' )
	,
	'js' => '_randimg.ckget()'
];

//.. 最近見た構造
//- 今回の表示内容決定
$tab_hist = [
	'tab' => [ 'history', 'Recently viewed' ] ,
	'div' => _div( '#histimgbox', '' )
		. _btn( '!_randimg.hist_clr()', _l( 'Clear' ) )
	,
	'js' => '_randimg.hist()'
];

//.. ページ
$pages = [];
foreach ([
	'3DEM' => [ 'emn', 'e_search' ] ,
	'Structure databases' => [ '', 'taxo' ] ,
	'Search' => [ 'e_search', 'ysearch', 'omos', 'fh_search' ] ,
	'Documents' => [ 'help', 'pages' ] ,
] as $categ => $item ) {
	$pages[] = $categ. _ul( array_map( '_page_link', $item ), 0 ); //- _page_link( ) 関数利用
}
$tab_pages = TEST ? [
	'tab' => [ 'file-text', 'Pages' ] ,
	'div' => _ul( $pages )
]: '';

//.. 生成
$id_form = ''
	. _l( 'ID or keywords' ). ': '
	. _idinput( ID, [ 'acomp' => 'kw' ])
;
_simple()->hdiv(
	'Open data' ,
	ID_HIT
		//- ヒットありのとき
		? _simple_tabs(
			'#id_set' ,
			[
				'tab' => [ 'search', 'ID/keywords' ] ,
				'div' => $id_form ,
			],
			$tab_rand ,
			$tab_hist ,
			$tab_pages ,
		)

		//- ヒットなしのとき
		: $id_form . _simple_tabs(
			$tab_rand + [ 'active' => true ],
			$tab_hist ,
			$tab_pages
		)
	,
	[ 'hide' => ID_HIT, 'id' => 'open' ]
);
unset( $tab_rand, $tab_hist, $id_form );
_simple()->time( 'open' );

//. データがない場合の終了処理
//- ここで出力して終わり
if ( ! ID_HIT ) {
	define( 'TOP_PAGE', true );
	_simple()->out([
		'title' => _ej( 'Yorodumi', '万見' ) ,
		'icon'	=> 'miru' ,
		'sub'	=> _ej(
			'PDB/EMDB/SASBDB browser' ,
			'PDB/EMDB/SASBDB ブラウザ' 
		) ,
		'openabout' => true ,
		'js'	=> [ 'quick' ],
		'docid'	=> 'about_ym' ,
		'newstag' => 'ym' ,
	]);
	die();
}

//. misc init 続き
define( 'I_SEL', _ic( 'select' ) );
define( 'TREP_AUTO', _subdata( 'trep_auto', [
	'chem'	=> 'pdb' ,
	'bird'	=> 'pdb' ,
][ DB ] ?: DB ) ?: [] );

$_primary_pap_id = '';
$_has_fh_item = [];

//. main
$js = '';
_simple()->time( 'common part' );

//.. 各種DBごとの処理
$o_data = new cls_data();
require( $fn_include );

if ( ! defined( 'MOV_EX' ) )
	define( 'MOV_EX', false );

if ( ! defined( 'MOLDATA_EX' ) ) //- EMDB以外はJMOLデータある
	define( 'MOLDATA_EX', true );

$o_data->make();

//.. 終了処理
_simple()
->jsvar([
	'entinfo' => [
		'id'	=> ID, 
		'did'	=> DID ,
		'db'	=> DB
	]
])
->out([
	'title_pk'	=> $main_id->DID ,
	'sub'		=> $main_id->DID . ': ' . _short( $_subtitle ?: $main_id->title() ) ,
	'openabout'	=> false ,
	'js'		=> [ $js, 'quick' ] ,
]);

//. function: _viewer (メインテーブルの中)
//- メインテーブルの中の「構造の表現」のビューア
function _viewer() {
	global $o_data, $main_id;
	$o_data->lev1title( 'strvis' );
	$term_file_type = _subdata( 'trep', 'media_file_type' );

	//.. movie
	foreach ( (array)$main_id->movinfo() as $num => $a ) {
		$cap = $img = $imgs = $imgss = $file = $dl = $files = $type = '';
		extract( $a );

		$dl_items = [];
		foreach ( [
			'mp4'	=> $files[ 'l' ][ 'm4v' ] ,
			'webm'	=> $files[ 'l' ][ 'webmv' ] ,
			'img'	=> $files[ 'l' ][ 'poster' ] ,
			'ses'	=> strtr( $dl, [ 'movie' => 's' ] ) . '.py'
		] as $t => $n ) {
			if ( ! file_exists( $n ) ) continue;
			$dl_items[] = _a( $n,
				$term_file_type[ $t ]. ', '. _format_bytes( filesize( $n ) )
			);
		}
		$out .= _div( '.clearfix topline' ,
			_btn( "!_pmov.open('" .DID. "','$num')| .left enticon_cap movselbtn",
				_img( $c, $img ) . _p( "#$num" )
			)
			. _ul( array_merge( $cap, [
				_pop( IC_DL. _l( 'Download' ), _ul( $dl_items ) )
			]), 10 )
		);
	}
	if ( $out )
		$o_data->lev1( 'Movie', $out. _div( '.right', _doc_pop( 'movie' ) ) );

	//.. viewer
	if ( !defined( 'MOLDATA_EX' ) || MOLDATA_EX ) {
		$o_data->lev1( 'Structure viewer', ''
			. _viewer_selector( DB == 'emdb' ? 'map' : 'mol' )
			. _btn_popviewer( DID, [ 'btn_label' => TERM_OPEN_VIEWER ])
			. _div( '.right', ''
				. ( DB == 'emdb' ? _doc_pop( 'surfview' ) : '' )
				. _doc_pop( 'molmil' )
				. _doc_pop( 'jmol' )
			)
		);
	}

	//.. mng
	if ( TEST && EPDB ) {
		$o_data->lev1( _p( '.red', 'EMN mng' ),
			_ab([ '_mng-pdbimg', 'id'=> ID ], '((mng movie))' )
		);
	}
}

//. function
//.. _set_data
function _set_data() {
	global $o_data;
	return $o_data;
}

//.. _main_id
function _main_id() {
	global $main_id;
	return $main_id;
}

//.. _hdiv_focus
function _hdiv_focus( $name, $title = 'Details' ) {
	return ' ' . _btn(
		"!_hdiv.focus('$name')",
		_fa( 'arrow-down' ). _icon_title( $title )
	);
}

//.. _seqstr: 配列文字列 カッコ書き対応
function _seqstr( $in ) {
	$a = [];
	$flg = false;
	$buf = '';
	foreach ( range( 0, strlen( $in ) - 1 ) as $n ) {
		$s = $in[ $n ];
		if ( $s == '(' )
			$flg = true;

		if ( $flg ) {
			$buf .= $s;
		} else {
			$a[] = $s;
		}
		if ( $s == ')' ) {
			$flg = false;
			$a[] = _span( '.green', $buf );
			$buf = '';
		}
	}
	$ret = [];
	foreach ( array_chunk( $a, 10 ) as $b )
		$ret[] = implode( '', $b );
	return _div( '.seq', implode( ' ', $ret ) );
}

//.. _icap: キャプション付き画像
//-  $url, $img, $cap, $opt, $add  [属性・値], [追加文字列（次の行に書かれる]
function _icap( $o ) {
	extract( $o ); // $url, $img, $cap, $opt, $add 
	
	return _div( ".icap $opt",
		_ab( $url, _img( '.icapi', $img ) . BR . _l( $cap ) )
		. ( $add == '' ? '' : BR . $add )
	);
}

//.. _pdbidrep: PDB ID が混ざっている文字列からID文字列を抽出
function _extract_pdbid( $s ) {
	if ( strtolower( $s ) == ID ) return;
	if ( is_array( $s ) )
		$s = _imp( $s );
	$ret = '';
	preg_match_all( '/\b([1-9][0-9a-zA-Z]{3})\b/', $s, $match );
	$ret = [];
	foreach ( $match[1] as $m ) {
		if ( ctype_digit( $m ) ) continue;
		$ret[] = $m;
	}
	return $ret;
}

	//.. _chem2pdbs
function _chem2pdbs() {
	$range = 50;
	$ids = _json_load2( DN_DATA . '/chem/chemid2pdbid.json.gz' )->{ID};
	$page = _getpost( 'page' ) ?: 0;

	$opg = new cls_pager([
		'str'	=> '' ,
		'total'	=> count( (array)$ids ) ,
		'page'	=> $page ,
		'range'	=> $range ,
		'pvar'	=> [ 'ajax' => 'chem2pdbs', 'id' => ID ] ,
		'div'	=> '#pdbs'
	]);

	return $opg->msg()
		. _ent_catalog( array_slice( (array)$ids, $page * $range, $range ) )
		. $opg->btn()
	;
}

//.. _add_trep: trep辞書に追加
function _add_trep( $a ) {
	global $_trep;
	//- 名称を受け取ったらtsvから
	if ( is_string( $a ) ) {
		$_trep = array_merge( $_trep, _subdata( 'trep', $a ) );
		return;
	}

	//- 一つだけなら日本語、配列なら、[英語, 日本語]
	if ( L_EN ) { //- 英語モード
		foreach ( $a as $k => $v ) {
			if ( is_string( $v ) ) continue;
			$_trep[ _trep_rep( $k )  ] = $v[0];
		}
	} else { //- 日本語モード
		foreach ( $a as $k => $v ) {
			$_trep[ _trep_rep( $k ) ] = is_string( $v ) ? $v : $v[1];
		}
	}
}

function _trep_rep( $in ) {
	return strtolower( strtr( $in, [ 'pdbx_' => '', '_' => ' ' ] ) );
}

//.. _trep: データ名 itemSomthing -> Item Somthing
function _trep( $in, $opt = '' ) {
	global $_trep;
	if ( $in == '' ) return;
	if ( _instr( '<', $in ) ) return $in;

	//... タグ名が文字列に入っている
	if ( _instr( '|', $in ) ) {
		list( $txt, $tag ) = explode( '|', $in );
		return _cifdic_link( $txt, $tag );
	}

	//... json文字列で指定
	if ( $opt ) {
		$e = $j = $tag; // = $sas = '';
		//- opt: e,j: 英語、日本語タイトル, sas: sascif辞書フラグ, tag: cifタグ }
		extract( is_string( $opt ) ? json_decode( $opt ) : $opt );
		$ret = _ej( $e, $j )  //- タイトルの指定がある？
			?: $_trep[ $tag ] //- タグ名の指定がある？
			?: _trep( $in )   //- 自動
		;
		return $tag ? _cifdic_link( $ret, $tag ) : $ret;
	} 

	//... $_trep; 日英両方
	$ret = $_trep[ $in ] ?: $_trep[ _trep_rep( $in ) ];
	if ( $ret ) return $ret;

	//... _l 関数
	if ( $in != ( $ret = _l( $in ) ) ) return $ret;

	//... 自動
	return defined( 'TREP_AUTO' ) && TREP_AUTO
		? ucfirst( _reg_rep( $in, TREP_AUTO ) )
		: $in
	;
}

//.. _quick_kv: _kvのquick用
function _quick_kv( $a, $tag = [] ) {
	if ( ! is_array( $a ) && ! is_object( $a ) )
		return $a;
	$ret = [];
	$buf = [];
	$div_l = $div_r = '';
	foreach ( (array)$a as $k => $v ) {
		if ( $v == '' ) continue;

		if ( $k == '_' || substr( $k, 0, 6 ) == '#notag' ) {
			//- キーなし
			$s = $v;
		} else if ( $k == '_' || substr( $k, 0, 6 ) == '#div_r' ) {
			//- 右フロートアイテム
			$div_r .= $v;
			continue;
		} else if ( $k == '_' || substr( $k, 0, 4 ) == '#div' ) {
			//- 左フロートアイテム
			$div_l .= $v;
			continue;
		} else {
			$iconk = _icon_title( "$k||" . $tag[ $k ] );
			if ( is_object( $v ) ) {
				_testinfo( $k, "objectを_quik_kvで書こうとした" );
			} else {
				$s = "<b>$iconk</b>: $v";
			}
		}

		//- 長いデータは単独、短いやつは同じ行
		if ( strlen( strip_tags( $s ) ) < 60
			&& ! _instr( '<div', $s )
			&& ! _instr( '#newline', $k ) 
		) {
			$buf[] = $s;
		} else {
			$ret[] = implode( SEP, $buf );
			$buf = [];
			$ret[] = _instr( '<table', $s ) ? $s : _long( $s, 200 );
		}
	}
	$ret[] = implode( SEP, $buf );
	$ret = implode( BR, array_filter( $ret ) );

	return $ret. $div_r. $div_l ? ''
		. ( $div_r == '' ? '' : _div( '.right', $div_r ) )
		. ( $div_l == '' ? '' : _div( '.left' , $div_l ) )
		. $ret
	: '' ;
}

//.. _valprep: 値の型によって処理
//- 数値なら、単位を付加、
function _valprep( $val, $key = '_', $categ = '' ) {
	global $_xmlunit, $wikipe_tags, $met_tags;
//	return $val . _kakko( $key );
	
	//- 数値: 単位付き, 文字列: そのまま, 配列: 結合, 連想配列: _kv
//	if ( $val === '0' ) return '(^_^)';
	if ( $val == '' ) return;

	//- 配列
	if ( strtolower( $key ) == 'sequence' || $key == 'pdbx_seq_one_letter_code' ) {
		$val = preg_replace( '/[^0-9a-zA-Z\(\)\?]/', '', $val );
		return _seqstr( $val );
	}

	//- フラグ
//	if ( substr( $key, -4 ) == 'Flag' ) {
	if ( $val == 'true' )  return 'Yes';
	if ( $val == 'false' ) return 'No';
//	}

	//... 数値なら、単位を付けて
	if ( is_numeric( $val ) ) {
		return implode( ' ', [ (float)$val, _get_unit( $key, $categ ) ] );
	}

	//... 文字列
	if ( is_string( $val ) ) {
		//- met
		if ( $met_tags[ "$categ.$key" ] )
			return _met_pop( strip_tags( $val ), $met_tags[ "$categ.$key" ] );

		//- 日付っぽい
		if ( _instr( 'date', strtolower( $key ) ) )
			return _datestr( $val );

		if ( _instr( 'space_group', $key ) || _instr( 'spaceGroup', $key ) ) {
			return _reg_rep( $val, [
				'/ ([2346])([1-5])/' 	=> '$1<sub>$2</sub>' ,
				'/212121/'				=> '2<sub>1</sub>2<sub>1</sub>2<sub>1</sub>' ,
				'/21212/'				=> '2<sub>1</sub>2<sub>1</sub>2' ,
				'/ /'	 => '',
			]);
		}

		//- wikipe
		if ( in_array( $key, $wikipe_tags ) )
			return $val. _obj('wikipe')->pop_xx( strip_tags( $val ) );

		//- PDB-IDが入っていそうなタグ
		if ( in_array( $key,
			[ 'pdbEntryId', 'pdb_entry_id', 'pdbChainId', 'pdbx_starting_model' ] ) ) {
			return $val . _div( '.left clearfix', 
				_ent_catalog( _extract_pdbid( $val ), [ 'mode' => 'icon' ] )
			);	
		}
		
		return $val;
	}
	
	//... 連想じゃない配列
	if ( array_values( (array)$val ) === $val )
		return _imp2( array_unique( (array)$val ) );

	//... 連想配列かオブジェクト
	$ret = [];
	foreach ( $val as $k => $v )
		$ret[ $k ] = _valprep( $v, $k, $categ );
	return $ret;
}

//.. _add_unit 単位データ追加
function _add_unit( $ar ) {
	global $_xmlunit;
	$_xmlunit = array_merge(
		(array)$_xmlunit,
		is_array( $ar ) ? $ar : _subdata( 'unit', $ar )
	);
}

//... _get_unit
function _get_unit( $key, $categ = '' ) {
	global $_xmlunit;
	$u = $_xmlunit["$categ.$key"] ?: $_xmlunit[$key];
	return $u && $u != '-' ? $u : '';
}

//.. _json_reid()
//- アクセスしやすいようにIDを振り直したJSONを作る
//- [ 配列名, どの要素を新IDとするか, 配列フラグ* ]
//- * 配列として処理するか(同じIDのものが複数ある場合)

function _json_reid( $ar ) {
	global $json;
	$ret = new stdClass;
	foreach ( $ar as $tag => $a ) {
		list( $new_name, $new_idtag, $flg_multi ) = $a;
		foreach ( (array)$json->$tag as $child ) {
			if ( $child == '' ) continue;

			if ( ! is_object( $ret->$new_name ) )
				$ret->$new_name = new stdClass;

			$new_id = $child->$new_idtag;
			if ( $new_id == '' ) continue;
			if ( is_array( $new_id ) ) continue;
			$child_clone = clone $child;
			unset( $child_clone->$new_idtag );

			//- IDの重複チェック
			if ( $ret->$new_name->$new_id != '' && ( ! $flg_multi ) ) {
				_testinfo(
					[ $ret->$new_name->$new_id, $child ],
					"conflict: $new_name - $new_id"
				);
			}
			if ( $flg_multi ) {
				$ret->$new_name->$new_id =
					array_merge( (array)$ret->$new_name->$new_id, [ $child_clone ] );
			} else {
				$ret->$new_name->$new_id = $child_clone;
			}
		}
	}

	return $ret;
}

//.. _omos_link Omokage検索へのリンク、長く、目立つように
function _omos_link( $id ) {
	return _ab(['omos', $id ], _ic( 'omokage' ). TERM_SEARCH_OMOKAGE_ASB )
		. ' '
		. _doc_pop( 'about_omosearch', [ 'label' => _kakko( 'details' ) ])
	;
}

//.. _unredun 繰り返す文字列対策
function _unredun( $str ) {
	$red = 0;
	$len = strlen( $str );
	foreach ( range( 20, 2 ) as $i ) {
		$p = substr( $str, 0, floor( $len / $i ) );
		if ( strlen( $p ) < 5 ) continue;
		if ( substr_count( $str, $p ) != $i ) continue;
		return $p;
	}
	return $str;
}

//.. _comma_rep 空白のないコンマ
function _comma_rep( $str ) {
//	return preg_replace( '/,([^ ])/', SEP . '$1', $str );
	return preg_replace( '/[;,] */', SEP, $str );
}
//.. _eqimg: 装置の写真
function _eqimg( $str ) {
	global $_eqimg_data;
	if ( $str == '' ) return; 
	if ( _instr( 'hitachi',$str ) ) return; 
	foreach ( $_eqimg_data as $fn => $data ) {
		if ( ! _instr( $data[ 'str' ] ?: $fn, $str ) ) continue;
		return _img( '.eqimg', DN_DATA. "/eqimg/$fn.jpg" ) .BR
			. _quick_kv([
				'Model' => $data[ 'name' ], 
				'Image courtesy' => $data[ 'by' ],
			])
		;
	}
}

//.. _emn_categ: EMNカテゴリ テストのみ
function _emn_categ() {
	global $main_id;
	if ( !TEST || !$main_id->is_em ) return;
	$c = _json_load2( DN_DATA. '/emn/id2categ.json' )->{ID};
	$l = _ej( 'e', 'j' );
	return _span( '.red', $c != ''
		? _json_load2( DN_DATA. '/emn/categ.json' )->$c->$l
		: 'unknown'
	). _set_categ( $main_id->id );
}

//.. _validation_rep
function _validation_rep( $ids = [] ) {
	if ( $ids == [] ) return;
	$flg = true;
	if ( $ids == 'pdb' ) {
		$flg = false;
		$ids = [ ID ];
	}
	$ret = [];
	foreach ( $ids as $id ) {
		$id = strtr( $id, [ 'pdb-' => '' ] );
		$dn = '/kf1/PDBj/ftp/pdbj/pub/pdb/validation_reports/' .substr( $id, 1, 2 ). "/$id";
		if ( !TESTSV && !is_dir( $dn ) ) continue;
		$u = 'validation_rep.php?id='. $id;
		$p = _before_release_time() ? '&pre=1' : '';
		$ret[] = ''
			. ( $flg ? _ab( "?id=$id", "PDB-ID: $id" ) . BR : '' )
			. _img( '#valrep_img', "$u$p" ) .BR
			. _ab( "$u&type=pdf$p" , IC_DL. _ej( 'Summary', '簡易版' ) )
			. _ab( "$u&type=full$p", IC_DL. _ej( 'Full report', '詳細版' ) )
		;
	}

	$cnt = count( $ret );
	if ( $cnt == 0 ) return;

	//- レポートがあったら説明ページへのリンクを付加
	$lnk = _ab([ 'about_valrep', '' ], IC_HELP. TERM_ABOUT_VALREP );
	return $cnt == 1
		? $ret[0] . $lnk
		: implode( BR, $ret ) .BR. $lnk
	;
}

//.. _jsonviewへのリンク テスト用
function _jsonview_links() {
	//- "struct_ref_seq", "plus:struct_ref_seq"
	if ( ! TEST ) return;
	$ret = [];
	$id = ID;
	foreach ( func_get_args() as $str ) {
		$type = DB;
		$node = $str;
		if ( _instr( ':', $str ) )
			list( $type, $node ) = explode( ':', $str, 2 );
		$ret[] = _ab([ 'jsonview', 'a' => "$type.$id.$node" ], $str );
	}
	return _span( '.red small', 'JSON: ' ._imp( $ret ) );

}

//.. _cifdic_link
function _cifdic_link( $str, $categ_item ) {
	return _pop_ajax(
		_trep( $str ). (
			_obj('wikipe')->get( $categ_item )->flg() ||
			_obj('wikipe')->get( explode( '.', $categ_item )[1] )->flg() 
				? IC_WIKIPE : '' 
		), [
			'cifdic',
			'q'  => $categ_item ?: $str ,
			'db' => defined( 'DB' ) && DB == 'sasbdb' ? 'sas': ''
		]
	);
}

//.. _func_homology
function _func_homology() {
	global $main_id, $_has_fh_item;
	$items = _obj('dbid')->strid2keys( $main_id );
	if ( ! $items ) return;
	$docpop = _div( '.right', _doc_pop('func_homology') );
	$_has_fh_item['all'] = true;

	//... 少ない
	if ( count( $items ) < 10 ) {
		$ret = [];
		foreach ( $items as $key ) {
			$o = ( new cls_dbid )->set_key( $key );
			$ret[] = $o->pop();
			$_has_fh_item[ $o->get_cls() ] = true;
		}
		return _long( $ret, 10 ). $docpop;
	} 

	//... 多い
	$items_cls = [];
	foreach ( $items as $i ) {
		$o = ( new cls_dbid )->set_key( $i );
		$c = $o->get_cls();
		$items_cls[ $c ][] = $o->pop();
		$_has_fh_item[ $c ] = true;
	}
	$tabs = [];
	foreach ( _subdata( 'trep', 'fhinfo_cls_name' ) as $cls => $cls_name ) {
		if ( ! $items_cls[ $cls ] ) continue;
		$tabs[] = [
			'tab' => $cls_name ,
			'div' => _long( array_slice( $items_cls[ $cls ], 0, 100 ), 10 )
				. BR
				. _ab(
					[ 'fh-search', 'id' => ID, 'type' => $cls ] ,
					_fa('search'). _l( 'Similarity search' ). ' - '. $cls_name
				)
		];
	}
	_simple()->time( 'fh_item' );
	return $docpop. _simple_tabs( $tabs );
}

//.. _categ2momkw
function _categ2momkw() {
	return [ 
		'ribosome-c'	=> 'ribosome' ,
		'70s'			=> '70S Ribosomes' ,
		'80s'			=> 'ribosome' ,
		'amyloid' 		=> 'amyloid' ,
		'synth'			=> 'designed' ,
	][ _ezsqlite([
		'dbname' => 'main' ,
		'select' => 'categ' ,
		'where'  => [ 'db_id', DID ]
	]) ];
}

//.. _mom_items
function _mom_items( $kw = [] ) {

	//... key
	$keys = _obj('dbid')->strid2keys( ( DB == 'emdb' ? 'e' : '' ) .ID );
	foreach ( array_filter( $kw ) as $k )
		$keys[] = "kw:". strtolower( $k );
	if ( DB == 'pdb' )
		$keys[] = 'pdb:'. ID;
//	_testinfo( $keys, 'MOM keys' );

	//... calc score
	$item_list = [];
	$score_list = [];
	foreach ( $keys as $key ) {
		foreach ( (array)json_decode( _ezsqlite([
			'dbname' => 'id2mom' ,
			'select' => 'mom' ,
			'where'  => [ 'dbid', $key ]
		])) as $mom_id => $score ) {
			if ( ! $score ) continue;
			$item_list[ $mom_id ][ $key ] = true;
			$score_list[ $mom_id ] += $score;
		}
	}

	//... output
	arsort( $score_list );
	$ret = [];
	foreach ( $score_list as $mom_id => $score ) {
		$fhent = [];
		foreach ( array_keys( $item_list[ $mom_id ] ) as $i ) {
			$fhent[] = _obj('dbid')->pop( $i );
		}
		$ret[] = _mom_link( $mom_id,
			_pop(
				_l('similarity'). _kakko( count( $item_list[ $mom_id ] ) ),
				10 < count( $fhent )
					? _div( '.pop_inner', _ul( $fhent, 0 ) )
					: _ul( $fhent, 0 )
			)
			. ( TEST ? SEP. _span( '.red', $score ) : '' )
		);
	}
	return _ul( $ret );
}

//.. _quick_taxo
$_cache_taxo =[];
function _quick_taxo( $name, $cname = '' ) {
	global $_cache_taxo;
	if ( ! $name ) return;
	if ( !$_cache_taxo[ $name ] )
		$_cache_taxo[ $name ] = _obj('taxo')->item( $name, $cname );
	return $_cache_taxo[ $name ];
}

//.. _symmetry_text 対称性の説明
function _symmetry_text( $str ) {
	$init = substr( $str, 0, 1 );
	$add = $str == 'C1'
		? 'asymmetric'
		: _subdata( 'trep', 'symmetry_term' )[ $init ]
	;
	$wikipe = $str == 'C1' ? 'x' : [
		'C' => 'Cyclic symmetry in three dimensions' ,
		'D' => 'Dihedral symmetry in three dimensions' ,
		'T' => 'Tetrahedral symmetry' ,
		'O' => 'Octahedral symmetry' ,
		'I' => 'Icosahedral symmetry' ,
	][ $init ];

	$num = 'n';
	$n = substr( $str, 1 );
	if ( is_numeric( $n ) ) {
		$num = $n;
		$str = substr( $str, 0, 1 ). "<sub>$n</sub>";
	}

	return $str. ( $add
		? _kakko( strtr( _l( $add ), [ '_' => $num ] ). _obj('wikipe')->pop_xx( $wikipe ) )
		: ''
	);
}

//.. _subtable_out: テーブルの中のテーブル
function _subtable_in( &$data, $array ){
	extract( $array ); //- $col, $row, $cat, $item, $val;
	$data[ 'col'  ][] = $col;
	$data[ 'row'  ][] = $row;
	$data[ 'item' ][] = $item;
	if ( ! $data[ 'tag' ][ $col ] )
		$data[ 'tag' ][ $col ] = "$cat.$item";
	if ( ! $data[ 'tag' ][ $row ] )
		$data[ 'tag' ][ $row ] = "$cat.$item";
	$data[ 'val' ][ $col ][ $row ] = _valprep( $val, $item, $cat );
}

function _subtable_out( &$json, &$array, $order = [], $num = 0 ) {
	if ( ! $array || count( (array)$array[ 'val' ] ) < 2 )
		return;

	extract( $array ); //- $val, $col, $row, $tag, $item
	unset( $array );
	$cols = _order( $col, $order );
	$ret = TR_TOP.TH.$top;
	foreach ( $cols as $c ) {
		$ret .= TH. _trep( $c, [ 'tag' => $tag[ $c ] ] );
	}
	foreach ( _order( $row, $order ) as $r ) {
		$ret .= TR.TH. _trep( $r, [ 'tag' => $tag[ $r ] ] );
		foreach ( $cols as $c ) {
			$ret .= TD. ( (string)$val[ $c ][ $r ] !== ''
				? $val[ $c ][ $r ]
				: '-'
			);
		}
	}
	
	//- json書き換え
	foreach ( $item as $i )
		unset( $json->$i );

	while ( $json->{"#notag_$num"} )
		++ $num;
	$json->{"#notag_$num"}
		= _t( 'table'. ( 5 < count( $cols ) ? '|.smaller': '' ), $ret );
}

function _order( $array, $order ) {
	$ret = [];
	foreach ( (array)$order as $s ) {
		if ( in_array( $s, $array ) )
			$ret[] = $s;
	}
	return array_values( array_unique( array_merge( $ret, $array ) ) );
}

//.. _img_sl
function _img_sl( $s, $l ) {
	return _ab( _fn( $l, ID ), _img( _fn( $s, ID ) ) );
}

//.. _history_table
function _history_table( $in ) {
	$flg_det  = false; //- 詳細列があるか
	$flg_hide = false; //- 隠し行があるか
	$out = [];
	//- data rearrange
	foreach ( $in as $c ) {
		$d = $c[ 'date' ];
		while ( true ) {
			if ( ! $out[ $d ] ) break;
			$d .= '-';
		}
		
		//- detail
		foreach ( $c as $k => $v ) {
			if ( in_array( $k, [ 'date', 'event', 'show' ] ) ) continue;
			unset( $c[ $k ] );
			$c[ 'det' ][ $k ] = is_array( $v ) ? _long( $v, 2 ) : $v;
			$flg_det = true;
		}

		//- hide
		if ( ! $c['show'] )
			$flg_hide = true;
		
		$out[ $d ] = $c;
	}
	ksort( $out );
	
	//- テーブルヘッダ
/*
	$ret = TR_TOP;
	foreach ( $flg_det ? [ '', 'date', 'details' ]: [ '', 'date' ] as $c ) {
		$ret .= TH. _trep( $c );
	}
*/
	$ret = '';	
	//- データ
	foreach ( $out as $c ) {
		$ret .= ( $c['show'] ? TR : _e( 'tr| .hist_hide hide' ) )
			.TH. _trep( $c['event'] )
			.TD. _datestr( $c['date'] )
			. ( $flg_det ? TD. ( _quick_kv( $c['det'] ) ?: '-' ) : '' )
		;
	}
	return _t( 'table', $ret ). ( $flg_hide ? ''
		. _btn(
			'.hist_show'
			. _atr_js( 
				'$(".hist_hide").show("medium");' .
				'$(".hist_show").hide("medium");'
			),
			_l( 'Show all' ) 
		)
		. _btn(
			'.hist_hide hide'
			. _atr_js( 
				'$(".hist_hide").hide("medium");' .
				'$(".hist_show").show("medium");' 
			),
			_l( 'Show less' )
		)
	: '' );
}
/*
*/

//.. _archive_tr
function _archive_tr( $in, $opt = [] ) {
	$name = $dl = $size = $disp = $doc = null;
	extract( $in );
	if ( $opt['no_file_no_link'] && ! $size ) return;
	_set_data()->lev2( $name, implode( TD, [ $dl, $size, $disp, $doc ] ) );
}

//. class: citation
class cls_citation {
	protected $data = [];
	protected $term = [];
	protected $url  = [];

	//.. constractor
	function __construct(){
		$this->url_search = _getpost( 'img_mode' ) == 'em' ? 'esearch' : 'ysearch';
	}

	//.. set_main
	function set_main( $array, $citation_id = 0 ) {
		global $_primary_pap_id;
		if ( ! is_numeric( $citation_id ) ) //- 'primary'が来ることも
			$citation_id = 0;
		$main = $sub = $info = [];
		//- 順番ぎめ
		$sub = [
			'volume' => null,
			'issue' => null,
			'page' => null,
		];
		
		//... 受け取った情報を整理
		foreach ( array_filter( $array ) as $k => $v ) {
			if ( in_array( $k, [ 'book', 'book title', 'journal', 'year', 'date' ] ) ) {
				//- main
				if ( $k == 'journal' )
					$v = "<i>$v</i>";
				$main[ $k ] = $v;
			} else if ( in_array( $k, [
				'title', 'authors', 'affi', 'abstract', 'doi', 'pmid', 'pmc' 
			] ) ) {
				//- info
				if ( $k == 'authors' ) {
					$o = [];
					$authors_orig = $v;
					foreach ( $v as $c ) {
						if ( ! is_string( $c ) ) {
							$c = _imp( $c );
						} else {
							$c = trim( $c );
						}
						$o[] = _ab([ $this->url_search, 'auth'=> $c ], $c );
					}
					$v = _imp2( $o );
				} else if ( $k == 'affi' ) {
					$v = _imp2( $v );
					$k = 'authors';
				} else if ( $k == 'abstract' ) {
					$o = [];
					foreach ( (object)$v as $k2 => $v2 ) {
						if ( $k2 == 'Copyright' ) continue;
						$o[ is_numeric( $k2 ) ? "#notag$k2" : $k2 ] = $v2;
					}
					$v = _long( _quick_kv( $o ), 200 );
				}
				$info[ $k ] = $v;
			} else {
				//- sub
				if ( $k == 'page' && is_array( $v ) ) {
					$v = implode( '-', array_unique( $v ) );
				}
				$sub[ $k ] = $v;
			}
		}
		
		//... 整形 
		extract( $info ); //- $pmid, $doi, $title, $abstract
		$pap_id = $pmid ?: _ezsqlite([
			'dbname' => 'pmid' ,
			'select' => 'pmid' ,
			'where'  => [ 'strid', DB == 'emdb' ? 'e'. ID : ID ] ,
		]);
		if ( ! $_primary_pap_id ) {
			$_primary_pap_id = $pap_id;
		}

		$doi_name = IC_L . (
			$array['journal']
			?: $array['book title']
			?: _l( 'Journal/publisher site' )
		);

		$main = _quick_kv( $main ) ?: _l( 'Citation' );
		$this->data[ $citation_id ] = implode( BR, array_filter([
			_ezsqlite([
				'dbname' => 'pmid' ,
				'select' => 'strid' ,
				'where'  => [ 'pmid', $pap_id ]
			]) 
				? _ab([ 'pap', 'id' => $pap_id ], _ic('article'). $main )
				: _pop(
					_quick_kv( $main ) ?: _l( 'Citation' ) , 
					_t( 'h2| .h_sub', _l( 'Citation information' ) )
					. _ul([
						_quick_kv( $sub ) ,
						$doi ? _ab([ 'doi', $doi ], $doi_name ): '' ,
						$pmc ? _ab([ 'pmc', $pmc ], IC_L. 'PubMed Central' ) : '' ,
						$pmid ? _dblink( 'PubMed', $pmid )
							: IC_L
							. _ab( 'http://www.ncbi.nlm.nih.gov/pubmed/?term=' . 
								urlencode( $title . ' ' . implode( ' ', (array)$authors_orig ) ) ,
								_l('Search PubMed')
							)
						,
					])
				)
			,
			_quick_kv([ 'Title'     => $title ]) , 
			_quick_kv([ 'p-authors' => $authors ]) ,
			_quick_kv([ 'Abstract'  => $abstract ]) 
		]) );
//		_testinfo( $this->data[ $citation_id ], $citation_id ) ;
	}

	//.. emdb_json
	function emdb_json( $j, $citation_id = 0 ) {
		//- authors
		$this->set_main([
			'journal'	=> $j->journal_abbreviation ?: $j->journal,
			'year'		=> $j->year ,
			'volume'	=> $j->volume ,
			'doi' 		=> $j->ref_DOI ,
			'CSD' 		=> $j->ref_CSD ,
			'ISSN' 		=> $j->ref_ISSN ,
			'ASTM'		=> $j->ref_ASTM ,
			'title' 	=> $j->title ,
			'authors'	=> $j->author ,
			'page'		=> $this->emdb_xml_page( $j ) ,
			'pmid'		=> $j->ref_PUBMED ,
		], $citation_id );
	}

	//.. emdb_non_journal
	function emdb_non_journal( $j, $citation_id = 0 ) {
		$ret = [
			'page'		=> $this->emdb_xml_page( $j ) ,
			'authors'	=> $j->author ,
			'title'		=> $j->thesis_title ,
			'first_page' => null,
			'last_page'	=> null ,
			'author'	=> null ,
		] + (array)$j;
		foreach ( $ret as $k => $v ) {
			if ( $k == 'authors' ) continue;
			if ( is_array( $v ) || is_object( $v ) )
				unset( $ret[ $k ] );
		}
		$this->set_main( $ret, $citation_id );
	}
	
	//.. emdb_xml_page
	function emdb_xml_page( $j ) {
		return $j->first_page || $j->last_page
			? [ $j->first_page, $j->last_page ]
			: null
		;
	}

	//.. pubmed_json
	//- pubmed jsonファイルがなければfalseを返す
	function pubmed_json( $pmid, $citation_id = 0 ) {
		if ( !$pmid ) return false;
		$j = _json_load2( _fn( 'pubmed', $pmid ) );
		if ( ! $j ) return false;
		$this->set_main([
			'journal'	=> $j->journal ,
			'year'		=> $j->year ,
			'volume'	=> $j->vol ,
			'issue'		=> $j->isu ,
			'doi' 		=> $j->id->doi ,
			'ISSN'		=> $j->id->issn ,
			'PII'		=> $j->id->pii ,
			'pmc'		=> $j->id->pmc ,
			'MID'		=> $j->id->mid ,

			'title' 	=> $j->title ,
			'affi'		=> _pubmed_auth( $j ),
			'page'		=> $j->page ,
			'pmid'		=> $pmid ,
			'abstract'	=> $j->abst
		], $citation_id );
		return true;
	}

	//.. pdb_json
	function pdb_json( &$json ) {
		global $main_id;
		//- author
		$authors = [];
		foreach ( (array)$json->citation_author as $c )
			$authors[ $c->citation_id ][ $c->ordinal ] = $c->name;

		//- author
		$editors = [];
		foreach ( (array)$json->citation_editor as $c )
			$editors[ $c->citation_id ][ $c->ordinal ] = $c->name;

		//- journal
		$pmid_emn = _ezsqlite([
			'dbname' => 'main',
			'where'  => [ 'db_id', DID ] ,
			'select' => 'pmid'
		]);

		foreach ( (array)$json->citation as $n => $c ) {
			if ( $c->id == 'primary' && $this->pubmed_json( $pmid_emn ) ) continue;
			if ( $this->pubmed_json( $c->pdbx_database_id_PubMed, $c->id ) ) continue;
			$array = [
				'authors'	=> $authors[ $c->id ] ,
				'page'		=> $c->page_first || $c->page_last
					? [ $c->page_first, $c->page_last ] : '' ,
				'pmid'		=> $c->pdbx_database_id_PubMed ,
				'doi' 		=> $c->pdbx_database_id_DOI ,
				'editor'	=> _imp2( $editors ) ,
			];

			foreach ( $c as $k => $v ) {
				$k = [
					'journal_abbrev'	=> 'journal' ,
					'journal_volume'	=> 'volume' ,
					'journal_issue'		=> 'issue' ,
					'journal_id_ASTM'	=> 'ASTM' ,
					'journal_id_CSD'	=> 'CSD' ,
					'journal_id_ISSN'	=> 'ISSN' ,

					'book_id_ISBN'		=> 'ISBN' ,
					'book_publisher'	=> 'Publisher' ,
					'book_publisher_city' => 'Publisher city' ,
					'book_title'		=> 'book title' ,

					'id'				=> 'x' ,
					'page_first'		=> 'x' ,
					'page_last'			=> 'x' ,
					'pdbx_database_id_PubMed' => 'x' ,
					'pdbx_database_id_DOI' => 'x' ,
				][ $k ] ?: $k;
				if ( $k == 'x' ) continue;
				if ( $k == 'year' && _instr( ' ', $v ) )
					$k = 'date';
				$array[ $k ] = $v; 
			}
			$this->set_main( $array, $c->id );
		}
		return $this;
	}

	//.. sasdbd_reid
	function sasbdb_reid() {
		$this->data = array_values( $this->data );
		return $this;
	}

	//.. output
	function output() {
//		_testinfo( $this->data, 'cls_citation' );
		if ( count( $this->data ) < 2 )
			return $this->data[0];
		$primary = _div( '', $this->data[0] );
		unset( $this->data[0] );
		$more = '';
		foreach ( $this->data as $cid => $data ) {
			$more .= _div( '.topline', "<b>#$cid: </b>" . $data );
		}
		$cnt = count( $this->data );
		return $primary . _more( $more, [
			'btn'  => _fa( 'angle-double-down' ). _term_rep( TERM_MORE_LI, $cnt ) ,
			'btn2' => _fa( 'angle-double-up' ). TERM_LESS_LI
		]);
	}
}

//. class: cls_related
class cls_related {
	protected $id_list = [];
	protected $mark_dic;
	protected $comment_dic;
	protected $is_em;
	protected $omolink_temp;

	//.. constractor
	function __construct( $in = [] ){
		global $_primary_pap_id; //- cls_citationで作成される
		$id_list = [];
		$flg_group_dep = $is_em = false;
		extract( $in );
		$this->id_list = $id_list;
		$this->is_em = $is_em;

		//- マーク、コメントデータ準備
		$this->mark_dic = [
			'cite'	=> _span( '.r_cite', 'C' ) ,
			'fit'	=> _span( '.r_fit',  'M' ) ,
			'start'	=> _span( '.r_fit',  'S' )
		];
		$this->comment_dic = [
			'cite'	=> TERM_REL_CITE. _kakko( $_primary_pap_id
				? _ab(['pap', 'id' => $_primary_pap_id ], _ic('article'). _l('ref.') )
				: ''
			) ,
			'fit'	=> DB == 'emdb' ? TERM_REL_FIT_E : TERM_REL_FIT_P ,
			'start'	=> TERM_REL_START
		];

		//- id_list追加
		if ( $is_em )
			$this->by_emn_info();
		if ( ! $flg_group_dep )
			$this->by_pubmed_id();

		$this->set_str_ent();
		
		//- omokageリンクテンプレート
		$this->omolink_temp = _p(
			_ab(
				[ 'omo-search', 'id' => '_id_' ],
				_ic( 'omokage' ). TERM_SEARCH_OMOKAGE
			). ' '
			._doc_pop( 'about_omosearch', [ 'label' => _kakko( 'details' ) ] )
		);
		return $this;
	}

	//.. by_emn_info: EMNアノテーションから
	function by_emn_info() {
		//- relatedjson
		foreach ( (array)_emn_json( 'related', DID ) as $i )
			$this->id_list[ $i ][ 'r' ] = true;

		//- fitted
		foreach ( (array)_emn_json( 'fit', DID ) as $i )
			$this->id_list[ _rep_pdbid( $i ) ][ 'fit' ] = true;

		//- fitted annot
		$types_exists = [];
		$fit_annot = _json_load( DN_DATA. '/emn/fit_annot.json.gz' );
		foreach ( $fit_annot as $k => $v ) {
			if ( $k == 'types' ) continue;
			if ( ! $v[ DID ] ) continue;
			$types_exists[] = $k;
			foreach ( $v[ DID ] as $i ) {
				$this->id_list[ _rep_pdbid( $i ) ][ "annot_$k" ] = true;
			}
		}
		foreach ( $types_exists as $type ) {
			$this->mark_dic[ "annot_$type" ] = _span( '.r_annot', $type );
			$this->comment_dic[ "annot_$type" ]
				= $fit_annot[ 'types' ][ $type ][ _ej( 'e', 'j' ) ]. LABEL_YM_ANNOT;
		}
	}

	//.. by_pubmed_id: PubMed-IDから
	function by_pubmed_id() {
		global $_primary_pap_id; //- cls_citationで作成される
		if ( ! $_primary_pap_id ) return;
		foreach ( _ezsqlite([
			'dbname' => 'pmid' ,
			'select' => 'strid' ,
			'where'  => [ 'pmid', $_primary_pap_id ] ,
			'flg_all' => true
		]) as $i ) {
			$i0 = substr( $i, 0, 1 );
			if ( $i0 == 'e' )
				$i  = 'emdb-' . _numonly( $i );
			else if ( $i0 != 'S' )
				$i = "pdb-$i";
			$this->id_list[ $i ][ 'cite' ] = true;
		}
	}

	//.. set_str_ent: 関連構造データ
	function set_str_ent() {
		global $o_data;
		unset( $this->id_list[ DID ] ); //- 自分自身は消す
		if (! $this->id_list ) return;
		$output = '';

		//- sort 重要順
		$sort = [];
		foreach ( $this->id_list as $i => $a ) {
			$sort[ $i ] = "3$i";
			if ( $a[ 'start'] ) $sort[ $i ] = "2$i";
			if ( $a[ 'cite' ] ) $sort[ $i ] = "1$i";
			if ( $a[ 'fit'  ] ) $sort[ $i ] = "0$i";
		}
		asort( $sort );

		//- まとめ
		foreach ( array_keys( $sort ) as $i ) {
			$marks = '';
			foreach ( array_keys( $this->id_list[ $i ] ) as $type )
				$marks .= $this->mark_dic[ $type ];
			$output .= ( new cls_entid( $i ) )->ent_item_img([
				'txt' => $this->id_list[ $i ][ 'txt' ] ,
				'add' => $marks
			]);
		}

		//- コメント
		$flg = [];
		foreach ( $this->id_list as $i => $c ) foreach ( array_keys( $c ) as $type ) {
			if ( $type == 'txt' || $type == 'r' ) continue;
			$flg[ $type ] = true;
		}
		foreach ( array_keys( $flg ) as $type )
			$comments .= _p( $this->mark_dic[ $type ] . ': ' . $this->comment_dic[ $type ] );
		if ( $comments )
			$output .= _div( '.clearfix', $comments );
			
		//- 出力
		$o_data->lev2( 'Related structure data', $output );
		return $this;
	}

	//.. set_empiar
	function set_empiar() {
		global $o_data;
		$output = [];
		foreach ( (array)json_decode( _ezsqlite([
			'dbname' => 'empiar' ,
			'select' => 'data' ,
			'where'  => [ 'id', DID ] ,
		]) ) as $empiar_id ) {
			$output[] = _ab([ 'empiar_j', $empiar_id ], IC_L. "EMPIAR-$empiar_id" )
				. _kakko( _quick_kv( (array)json_decode( _ezsqlite([
					'dbname' => 'empiar' ,
					'select' => 'data' ,
					'where'  => [ 'id', $empiar_id ] ,
				]))))
				. ( TEST ? ' '. _ab([ 'txtdisp', "empiar_xml.$empiar_id" ], 'xml (test)' ) : '')
			;
		}
		if ( $output )
			$o_data->lev2( 'EM raw data', implode( BR, $output ) );
		return $this;
	}

	//.. set_others
	function set_others( $data = [] ) {
		global $o_data;
		if ( $this->is_em )
			$this->set_empiar();
		foreach ( $data as $key => $val ) {
			if ( ! $val ) continue;
			$o_data->lev2( $key, $val );
		}
		return $this;
	}

	//.. set_omokage
	function set_omokage( $ida ) {
		global $o_data;
//		if ( TEST ) return $this;
		return $this;
		//- omokageプライマリ
		$simlist = '';
		foreach ( explode( ',', _ezsqlite([
			'dbname' => 'omopre' ,
			'select' => 'data' ,
			'where'  => [ 'id', $ida ] ,
		])) as $i ) {
			if ( $i )
				$simlist .= _pop_omoitem( $i );
		}
		
		//- output
		$o_data->lev2(
			TERM_SIMILAR_SHAPE_DATA , 
			$simlist
			. _p( _ab([ 'omo-search', 'id' => $ida ], _ic( 'omokage' ). TERM_SEARCH_OMOKAGE )
				//- help
				. ' ' ._doc_pop( 'about_omosearch',
					[ 'label' => _kakko( 'details' ) ] 
				)
			)
		);
		return $this;
	}
	//.. set_smilar
	function set_similar( $in ) {
		global $o_data, $_has_fh_item;

		//... omokageプライマリ
		$ida_primary = $in[0]['ida'];
		$simlist = '';
		foreach ( explode( ',', _ezsqlite([
			'dbname' => 'omopre' ,
			'select' => 'data' ,
			'where'  => [ 'id', $ida_primary ] ,
		])) as $i ) {
			if ( $i )
				$simlist .= _pop_omoitem( $i );
		}

		//... Omokageタブ
		$tabs = [];
		if ( $simlist ) foreach ( $in as $num => $data ) {
			$ida = $tab = null;
			extract( $data );
			$link = strtr( $this->omolink_temp, [ '_id_' => $ida ] );
			$tabs[] = ( $num == 0 ) ? [
				//- ひとつめのタブ
				'tab' => count( $in ) == 1 ? TERM_SIM_SHAPE : "$tab -". TERM_SIM_SHAPE ,
				'div' => $simlist. $link ,
			] : [
				//- 2以降
				'tab' => $tab ,
				'div' => LOADING. _div( "#sim_div_$ida", ''). $link ,
				'js'  => "_get_simlist('omokage','$ida','#sim_div_$ida')" ,
			];
		}

		//... fhタブ
		$_has_fh_item[ 'hc' ] = $_has_fh_item[ 'h' ] || $_has_fh_item[ 'c' ] ;
		foreach ( _subdata( 'trep', 'fh_search_keys' ) as $cls => $cls_name ) {
			if ( ! $_has_fh_item[ $cls ] ) continue;
			$tabs[] = [
				'tab' => $cls_name ,
				'div' => LOADING
					. _div( "#sim_div_$cls", '' ) 
					. _ab(
						[ 'fh-search', 'id' => DID, 'type' => $cls ] , 
						_fa('search'). _l( 'Similarity search' ). ' - '. _trep( $cls_name )
					)
					. _doc_pop( 'about_fh_search' )
				,
				'js'  => "_get_simlist('$cls','". DID. "','#sim_div_$cls')"
			];
		}
		
		//... end
		if ( $tabs )
			$o_data->lev2( 'similar_str_data', _simple_tabs( $tabs ) );
		return $this;
	}

	//.. end
	function end() {
		global $o_data;
		$o_data->end2( 'Related structure data' );
		_simple()->time( 'related' );
	}
}

//. class: cls_data
//- this->$data にデータをしまっていき、最後にmakeメソッドで_simple()->hdivへ出力
//- lev1 は直接登録するので、終了処理が不要->先にタイトルぎめ
//- lev2と3は、終了処理が必要、終了処理でタイトルぎめ 

//- タイトル文字列の翻訳は、_simple()->hdivか _simple_tableなどの出力時、このクラスではやらない
//- 値の単位付などは最初に変数に入れるときに


class cls_data {
	protected $title1,
		$flg_multi_table , //- 複数のテーブルが入るかフラグ
		$data = [], $data2 = [], $data3 = [], //- データ
		$ign1 = [], $ign2 = [], $ign3 = [], //- 無視するタグ
		$tag2 = [], $tag3 = [] ,
		$hide = [], $trep_global = []
	;

	//.. testdata
	function testdata() {
		_testinfo( $this->data, 'cls_data->data');
	}

	//.. lev1
	function lev1title( $name, $multi = false, $hide = false ) {
		$name2 = $name;
		//- 空じゃないデータで始めようとした
		while( $this->data[ $name2 ] != [] ) {
			$name2 .= '~';
			$this->data[ $new_name2 ] = $this->data[ $name ];
		}

		$this->data[ $name ] = [];
		$this->ign1 = [];
		$this->title1 = $name;
		$this->flg_multi_table = $multi;
		$this->hide[ $name ] = $hide;
		return $this;
	}
	function lev1( $key, $val ) { //- (valは連想配列でもいい)
		if ( in_array( $key, $this->ign1 ) ) return $this;
		return $this->lev1set( $key, _valprep( $val, $key ) );
	}	

	function lev1set( $key, $val ) {
		//- 複数テーブルモードなら、連想配列のママで格納
		if ( in_array( $key, $this->ign1 ) ) return $this;
		while( $this->data[ $this->title1 ][ $key ] != ''  ) //- キー名重複対策
			$key .= '~';
		$this->data[ $this->title1 ][ $key ] = $this->flg_multi_table
			? $val : _quick_kv( $val, $this->tag2 );
		return $this;
	}

	//- 順番ぎめ (予め空の配列を作っておく)
	function lev1order( $ar ) {
		foreach ( $ar as $a )
			$this->data[ $a ] = '';
		return $this;
	}

	function lev1ign( $ar ) {
		$this->ign1 = array_map( 'strtolower', $ar );
		return $this;
	}
	
	//- 連想配列でまとめて
	function lev1ar( $ar ) {
		foreach ( (array)$ar as $k => $v )
			$this->lev1( $k, $v );
		return $this;
	}

	//- テーブルに入れない
	function lev1direct( $s ) {
		if ( $this->data[ $this->title1 ] == [] ) {
			$this->data[ $this->title1 ] = $s;
		} else {
			$this->data[ $this->title1 ] .= $s;
		}
		return $this;
	}

	//.. lev2
	//- valは配列でもいい
	//- $tagにcifdicのcateg.itemを書いておくと、辞書へのリンクになる
	function lev2( $key, $val, $tag = '' ) {
		$this->tag2[ $key ] = $tag; //- lev2のタイトルのタグ
		return $this->lev2set( $key, _valprep( $val, $key, explode('.', $tag )[0] ) );
	}

	function lev2set( $key, $val ) {
		if ( in_array( strtolower( $key ), $this->ign2 ) ) return $this;
		if ( $val == '' ) return $this;

		while ( $this->data2[ $key ] != [] ) //- キーに重複？
			$key .= '~';

		//- 複数テーブルモードでないのに配列なら、括弧でくくる
		$this->data2[ $key ] = $this->flg_multi_table || ! is_array( $val )
			? _quick_kv( $val, $this->tag3 )
			: '(' . _quick_kv( $val, $this->tag3 ) . ')'
		;
		return $this;
	}

	//- 順番ぎめ (予め空の配列を作っておく)
	function lev2order( $ar ) {
		foreach ( $ar as $a )
			$this->data2[ $a ] = '';
		return $this;
	}

	function lev2ign( $ar ) {
		$this->ign2 = array_map( 'strtolower', $ar );
		return $this;
	}

	function end2( $t ) {
		$this->lev1set( $t, $this->data2 );
//		$this->data2;
		$this->data2 = [];
		$this->data3 = [];
		$this->tag2  = [];
		$this->tag3  = [];
		$this->ign2  = [];
		$this->ign3  = [];
		return $this;
	}

	//.. lev3
	//- valは配列だと良くない
	function lev3( $key, $val, $tag = '' ) {
		if ( in_array( strtolower( $key ), $this->ign3 ) ) return $this;
		if ( $val == '' ) return $this;
		while( $this->data3[ $key ] != '' ) //- キー名重複対応
			$key .= '~';
		$this->data3[ $key ] = _quick_kv( _valprep( $val, $key, explode('.', $tag )[0] ) );
		$this->tag3[ $key ] = $tag;
		return $this;
	}

	//- 順番ぎめ (予め空の配列を作っておく)
	function lev3order( $ar ) {
		foreach ( $ar as $a )
			$this->data3[ $a ] = '';
		return $this;
	}

	function lev3ign( $ar ) {
		$this->ign3 = array_map( 'strtolower', $ar );
		return $this;
	}

	function end3( $t ) {
		if ( $this->data3 == [] ) return $this;
		$this->lev2set( $t, $this->data3 );
		$this->data3 = [];
		$this->ign3 = [];
		$this->tag3 = [];
		return $this;
	}

	//.. make
	function make() {
		foreach ( (array)$this->data as $h => $d ) {
			if ( $d == '' ) continue;
			if ( is_string( $d ) ) {
				//- テーブル無し
				$out = $d;
			} else if ( ! is_array( reset( $d ) ) ) {//- 最初の要素を見る
				//- テーブルひとつ
				$out = _simple_table( $d );
			} else {
				//- h2のあるブロック (2階層の情報)
				$out = '';
				if ( count( $d ) > 3 )
					$out .= BTN_HDIV2_ALL;
				foreach ( $d as $h2 => $d2 ) {
					$t = _simple_table( $d2 );
					if ( ! $t ) continue;
					$out .= _simple()->hdiv(
						$h2,
						$t ,
						[ 'type' => 'h2', 'hide' => ( count( $d2 ) > 15 || count( $d ) > 5 )]
					);
				}
			}
			_simple()->hdiv( $h, $out, [
				'id' => preg_replace( [ '/ .*$/', '/[^a-z0-9]/' ], '', strtolower( $h ) ) ,
				'hide' => $this->hide[ $h ]
			]);
		}
	}

	//.. basicinfo: 基本情報の一番上の列
	function basicinfo( $opt ) {
		global $main_id;
		$flg_vis = $flg_link = $js_open_viewer = $add_txt = null;
		extract( $opt );

		$fn_img = $main_id->imgfile( 'l' );
		return $this
			->lev1title( 'Basic information' )
			->lev2( '#div', $js_open_viewer
				? _btn( "!$js_open_viewer | .movselbtn", _img( $fn_img ) )
				: _img( '.mainimg', $fn_img )
			)
			->lev2( 'Database', _doc_pop( $main_id->db, [ 'noicon' => true ] ) )
			->lev2( 'ID',
				( $main_id->db == 'emdb' ? 'EMD-' : '' ) .
				(string)$main_id->id 
			)
			->lev2( '#notag #newline' , ''
				. ( $add_txt )
				. ( $flg_vis  ? _hdiv_focus( 'strvis', 'strvis' ) : '' )
				. ( $flg_link ? _hdiv_focus( 'downlink', 'downlink' ) : '' )
			)->end2( 'Entry' )
		;
	}
	//.. test_item
	function test_item( $items ) {
		if ( ! TEST ) return $this;
		return $this->lev1( _span( '.red', 'test items' ), $items );
	}
}

